/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get all tasks */
        get: operations["getTasks"];
        put?: never;
        /** create a task */
        post: operations["createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description todo id */
                id: components["parameters"]["TaskIdParameter"];
            };
            cookie?: never;
        };
        get: operations["getTask"];
        put: operations["updateTask"];
        post?: never;
        delete: operations["deleteTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        NewTask: {
            title: string;
            description: string;
        };
        Task: components["schemas"]["NewTask"] & {
            /** Format: int64 */
            id: number;
        };
        Error: {
            /** Format: int32 */
            code: number;
            message: string;
        };
    };
    responses: {
        /** @description Not Found */
        NotFoundResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad Request */
        BadRequestResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Error */
        InternalErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description todo id */
        TaskIdParameter: number;
    };
    requestBodies: {
        /** @description data for creating a task */
        CreateTaskRequestBody: {
            content: {
                "application/json": components["schemas"]["Task"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getTasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get all tasks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"][];
                };
            };
            500: components["responses"]["InternalErrorResponse"];
        };
    };
    createTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description data for creating a task */
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewTask"];
            };
        };
        responses: {
            /** @description success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int64 */
                        id?: number;
                    };
                };
            };
            400: components["responses"]["BadRequestResponse"];
            500: components["responses"]["InternalErrorResponse"];
        };
    };
    getTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description todo id */
                id: components["parameters"]["TaskIdParameter"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            404: components["responses"]["NotFoundResponse"];
            500: components["responses"]["InternalErrorResponse"];
        };
    };
    updateTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description todo id */
                id: components["parameters"]["TaskIdParameter"];
            };
            cookie?: never;
        };
        /** @description data for updating the task */
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewTask"];
            };
        };
        responses: {
            /** @description success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestResponse"];
            500: components["responses"]["InternalErrorResponse"];
        };
    };
    deleteTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description todo id */
                id: components["parameters"]["TaskIdParameter"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["InternalErrorResponse"];
        };
    };
}
